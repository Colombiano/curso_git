esse eh meu arquivo

Usei um 

$echo "esse é meu arquivo" >> arq1.txt 

Para gerar a frase inicial e colocar um conteúdo dentro do arq1.txt, criado anteriormente com um simples

$ touch arq1.txt
<<<<<<< HEAD

Depois, para confirmar o que fiz e ver o que o comando echo tinha gerado dentro do arquivo: 

=======

Depois, para confirmar o que fiz e ver o que o comando echo tinha gerado dentro do arquivo: 

>>>>>>> 09189c28cdf09ed68268a1857a48ccaa3ace1f41
$cat arq1.txt

Antes disso, da criação do arquivo (touch + echo), eu setei meu usuário no git usando os seguintes comando:

$ git config --global user.name "meu_usuário_no_github"
$ git config --global user.email "email_do_meu_usuário_no_git_hub"

Na sequência criei uma pasta, na área de trabalho, chamada "curso_git". É nela onde encontra-se o arq1.txt.

Em seguida, para transformar esse diretório em um repositório git, bastaria eu fazer:

$ git init

Deve-se fazer isso estando dentro da pasta do seu repositório.

Toda vez que eu quiser ver o status do meu repositório, basta eu fazer um:

$ git status

Neste caso eu veria algo assim:

# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#   arq1.txt
nothing added to commit but untracked files present (use "git add" to track)

Com isso eu percebo que meus arquivos, que no caso é um só, não encontra-se rastreado/ monitorado. Cada arquivo no git possui um chamado ciclo de vida do seu status. 

Para colocar esse arquivo como monitorado/rastreado, basta fazer:

$ git add arq1.txt

Isso irá criar algo assim:


# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#   new file:   arq1.txt


Esse arquivo foi rastreado mas não foi gravado/commitado (dado um commit)

Fazemos isso com um:

$ git commit - m "comentários das aulas"

O " -m" significa mensagem

Após o comando, ficaríamos assim:


[master (root-commit) 7cd4606] comentarios das aulas
 1 file changed, 46 insertions(+)
   create mode 100644 arq1.txt


Assim, toda vez que eu queria atualizar o arquivo, com o que foi alterado, basta eu fazer o add seguido do commit.


$ git add arq1.txt
$ git commit -m "inserido mais um comentario em relação as aulas"

[master 8c0060d] inserido mais um comentario em relação as aulas
1 file changed, 28 insertions(+)

Para ver todas as alterações já feitas neste repositório, bastaria eu fazer:

$ git log

Que teria essa saída:


    commit 6c8ea10153d9929c387562a24c7064061ceea53e
    Author: lpcolombiano@gmail.com <lpcolombiano@gmail.com>
    Date:   Sat Jun 3 12:03:14 2017 -0300

        inserido um novo comentario em relação as aulas. Como add e commitar um arqu

            commit 8c0060d7277cf5b7f3c6bb3ca8d36f9d7afacdf6
                Author: lpcolombiano@gmail.com <lpcolombiano@gmail.com>
                    Date:   Sat Jun 3 11:58:11 2017 -0300

                            inserido mais um comentario em relação as aulas

                                    commit 7cd46063429aede459ae622b61734a64cabbefbd
                                            Author: lpcolombiano@gmail.com <lpcolombiano@gmail.com>
                                                    Date:   Sat Jun 3 11:53:44 2017 -0300

                                                                comentarios das aulas


Vemos que somente um usuário fez um commit. Também podemos ver a data da modificação, o número do hash, etc. 

Assim que eu crie um repositório no github, no caso "curso_git", eu tenho que apontar meu repositório local para o repositório criado.

Faço isso pegando o endereço (https ou ssh) do repositório criado.

https://github.com/Colombiano/curso_git.git (https)
git@github.com:Colombiano/curso_git.git (ssh)

E faço um:

$ git remote add origin https://github.com/Colombiano/curso_git.git

Depois disso eu faria um:

$ git push -u origin master
Para jogar tudo no github.

Teremos a seguinte saída:

                             Username for 'https://github.com': Colombiano
                             Password for 'https://Colombiano@github.com': 
                             Counting objects: 15, done.
                             Delta compression using up to 2 threads.
                             Compressing objects: 100% (10/10), done.
                             Writing objects: 100% (15/15), 2.66 KiB, done.
                             Total 15 (delta 4), reused 0 (delta 0)
                             remote: Resolving deltas: 100% (4/4), done.
                             To https://github.com/Colombiano/curso_git.git
                             * [new branch]      master -> master
                             Branch master set up to track remote branch master from origin.


Eu posso add vários arquivos por vez fazendo:

$ git add .

A área stage é onde ficam os arquivos que foram rastreados mas não foram gravadas no repositórios master. Cada vez que eu modifico o arquivo eu tenho que rastreado com o "add". Toda vez que eu mudo ele eu terei que rastrear ele novamente.

Também é importante criar um gitignore para que eu tenha a possibilidade de ter arquivos ou diretórios no meu repositório local que eu não queria enviar para o meu repositório virtual.

$ touch .gitignore

Caso eu queria dizer que um arquivo ou diretório não suba para o github, basta fazer algo assim:

$ echo "arquivo_que_existe_no_repositório_local_mas_que_não_quero_subir_para_o_repositório_virtual.c" >> .gitignore
$ echo "diretório/" >> .gitignore (para adicionar um diretório que não quero subir)

$ git add . (rastreando tudo que tenho atualmente no meu repositório local)

$ git commit -m "adicionado gitignore" (realizando o commit)

$ git push -u origin master

